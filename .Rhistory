s + geom_point(),
s+ geom_jitter(),
s + stat_summary(fun.y = mean , geom = "point")+
stat_summary(fun.data = mean_sdl ,fun.args = list(mult = 1),geom=  "errorbar" , width=0.2))
w + theme(panel.background = element_rect(color = "gray"),
strip.text = element_text(color = "Red"))
ggplot(airquality,aes(x=factor(Month),y=Ozone))+
stat_summary(fun.y = mean,geom = "point")+
stat_summary(fun.data = mean_sdl ,fun.args = list(mult =1) ,geom="errorbar",width=0.5)
ggplot(airquality,aes(x=factor(Month),y=Ozone))+
geom_boxplot()
ggplot(airquality,aes(x=factor(Month),y=Ozone))+
geom_boxplot(geom= "errorbar")
ggplot(airquality,aes(x=factor(Month),y=Ozone))+
geom_boxplot(geom= "errorbar",width=0.9)
ggplot(airquality,aes(x=factor(Month),y=Ozone))+
geom_boxplot()+
stat_summary(fun.y = mean ,geom="line")+
stat_summary(fun.data = mean_sdl  , fun.args = list(mult=1),geom = "ribbon")
ggplot(airquality,aes(x=factor(Month),y=Ozone))+
stat_summary(fun.y = mean ,geom="line")+
stat_summary(fun.data = mean_sdl  , fun.args = list(mult=1),geom = "ribbon")
ggplot(barley, aes(x = year, y = yield, col = site, group = site, fill = site)) +
stat_summary(fun.y = mean, geom = "line") +
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = "ribbon",
alpha = 0.1, col = NA)+
# Create overlapping ribbon plot from scratch
ribboin<-
ggplot(barley, aes(x = year, y = yield, col = site, group = site, fill = site)) +
stat_summary(fun.y = mean, geom = "line") +
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = "ribbon",
alpha = 0.1, col = NA)+
theme_classic()
ggplot(airquality,aes(x=factor(Month),y=Ozone))+
geom_point()+
stat_summary(fun.y = mean ,geom="pont")+
stat_summary(fun.data = mean_sdl  , fun.args = list(mult=1),geom = "errorbar",width = 0.6)
ggplot(airquality,aes(x=factor(Month),y=Ozone))+
geom_point()+
stat_summary(fun.y = mean ,geom="point")+
stat_summary(fun.data = mean_sdl  , fun.args = list(mult=1),geom = "errorbar",width = 0.6)
ggplot(airquality,aes(x=factor(Month),y=Ozone))+
geom_point()+
stat_summary(fun.y = mean ,geom="point")+
stat_summary(fun.data = mean_sdl  , fun.args = list(mult=1),geom = "errorbar",width = 0.6,col = "red")
ggplot(airquality,aes(x=factor(Month),y=Ozone))+
geom_point()+
stat_summary(fun.y = mean ,geom="point",col = "red")+
stat_summary(fun.data = mean_sdl  , fun.args = list(mult=1),geom = "errorbar",width = 0.6)
ggplot(airquality,aes(x=factor(Month),y=Ozone))+
geom_boxplot()+
stat_summary(fun.y = mean ,geom="point",col = "red")+
stat_summary(fun.data = mean_sdl  , fun.args = list(mult=1),geom = "errorbar",width = 0.6)
ggplot(airquality,aes(x=factor(Month),y=Ozone))+
geom_boxplot()+
stat_summary(fun.y = mean ,geom="point",col = "red")+
stat_summary(fun.data = mean_sdl  , fun.args = list(mult=1),geom = "ribbon",width = 0.6)
install.packages('Ari')
install.packages('ari')
library(ari)
file.show(ari_example("ari_comments.Rmd"))
Sys.setenv("AWS_ACCESS_KEY_ID" = "EA6TDV7ASDE9TL2WI6RJ",
"AWS_SECRET_ACCESS_KEY" = "OSnwITbMzcAwvHfYDEmk10khb3g82j04Wj8Va4AA",
"AWS_DEFAULT_REGION" = "us-east-2")
# Use this Rmd file to create the slides
rmd_file <- ari_example("ari_comments.Rmd")
# Normally you would create this HTML file using rmarkdown::render()
html_file <- ari_example("ari_intro.html")
ari_narrate(rmd_file, html_file, voice = "Joey", capture_method = "iterative")
install.packages('aws.polly')
library(aws.polly)
ari_narrate(rmd_file, html_file, voice = "Joey", capture_method = "iterative")
library(rmarkdown)
ari_narrate(rmd_file, html_file, voice = "Joey", capture_method = "iterative")
Sys.setenv("AWS_ACCESS_KEY_ID" = "EA6TDV7ASDE9TL2WI6RJ",
"AWS_SECRET_ACCESS_KEY" = "OSnwITbMzcAwvHfYDEmk10khb3g82j04Wj8Va4AA",
"AWS_DEFAULT_REGION" = "us-east-2")
# Use this Rmd file to create the slides
rmd_file <- ari_example("ari_comments.Rmd")
# Normally you would create this HTML file using rmarkdown::render()
html_file <- ari_example("ari_intro.html")
ari_narrate(rmd_file, html_file, voice = "Joey", capture_method = "iterative")
rmd_file
html_file
rmd_file
rmd_file <- ari_example("ari_comments.Rmd")
rmd_file
# Normally you would create this HTML file using rmarkdown::render()
html_filew <- ari_example("ari_intro.html")
library(devtools)
install_github("seankross/ari")
library(readr)
X01_22_2020_1200 <- read_csv("C:/Users/user/Desktop/My folder/PDF-DataScience/DataSet/Corona Virues/01-22-2020_1200.csv")
View(X01_22_2020_1200)
library(DBI)
con <- dbConnect(odbc::odbc(), "Excel Files")
savehistory("C:/Users/user/Desktop/eee.Rhistory")
install.packages(c("backports", "bit", "blob", "bookdown", "callr", "caret", "checkmate", "classInt", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "devtools", "digest", "e1071", "forcats", "foreach", "fs", "GGally", "gh", "glue", "gtools", "h2o", "hexbin", "Hmisc", "htmlTable", "htmlwidgets", "isoband", "jsonlite", "latticeExtra", "lava", "leaflet", "lme4", "lubridate", "maptools", "markdown", "matlib", "microbenchmark", "mime", "ModelMetrics", "modelr", "nloptr", "pkgbuild", "PKI", "plotly", "plyr", "prettyunits", "pROC", "processx", "promises", "ps", "purrr", "quantreg", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "recipes", "reshape2", "rgdal", "rgeos", "rgl", "RgoogleMaps", "RJSONIO", "RMySQL", "roxygen2", "RPostgres", "RSQLite", "rstudioapi", "scales", "selectr", "sf", "sp", "SQUAREM", "stringi", "swirl", "sys", "testthat", "tibble", "tidyselect", "tigris", "tinytex", "units", "usethis", "uuid", "whisker", "xfun", "XML", "xml2", "yaml", "zoo"))
install.packages(c("backports", "bit", "blob", "bookdown", "callr", "caret", "checkmate", "classInt", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "devtools", "digest", "e1071", "forcats", "foreach", "fs", "GGally", "gh", "glue", "gtools", "h2o", "hexbin", "Hmisc", "htmlTable", "htmlwidgets", "isoband", "jsonlite", "latticeExtra", "lava", "leaflet", "lme4", "lubridate", "maptools", "markdown", "matlib", "microbenchmark", "mime", "ModelMetrics", "modelr", "nloptr", "pkgbuild", "PKI", "plotly", "plyr", "prettyunits", "pROC", "processx", "promises", "ps", "purrr", "quantreg", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "recipes", "reshape2", "rgdal", "rgeos", "rgl", "RgoogleMaps", "RJSONIO", "RMySQL", "roxygen2", "RPostgres", "RSQLite", "rstudioapi", "scales", "selectr", "sf", "sp", "SQUAREM", "stringi", "swirl", "sys", "testthat", "tibble", "tidyselect", "tigris", "tinytex", "units", "usethis", "uuid", "whisker", "xfun", "XML", "xml2", "yaml", "zoo"))
install.packages(c("backports", "bit", "blob", "bookdown", "callr", "caret", "checkmate", "classInt", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "devtools", "digest", "e1071", "forcats", "foreach", "fs", "GGally", "gh", "glue", "gtools", "h2o", "hexbin", "Hmisc", "htmlTable", "htmlwidgets", "isoband", "jsonlite", "latticeExtra", "lava", "leaflet", "lme4", "lubridate", "maptools", "markdown", "matlib", "microbenchmark", "mime", "ModelMetrics", "modelr", "nloptr", "pkgbuild", "PKI", "plotly", "plyr", "prettyunits", "pROC", "processx", "promises", "ps", "purrr", "quantreg", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "recipes", "reshape2", "rgdal", "rgeos", "rgl", "RgoogleMaps", "RJSONIO", "RMySQL", "roxygen2", "RPostgres", "RSQLite", "rstudioapi", "scales", "selectr", "sf", "sp", "SQUAREM", "stringi", "swirl", "sys", "testthat", "tibble", "tidyselect", "tigris", "tinytex", "units", "usethis", "uuid", "whisker", "xfun", "XML", "xml2", "yaml", "zoo"))
source('C:/Users/user/Desktop/My folder/packages.R', echo=TRUE)
source('C:/Users/user/Desktop/My folder/packages.R', echo=TRUE)
library(ggplot2)
library(dplyr)
library(magrittr)
library(tidyr)
library(readr)
set.seed(66)
par(mar = c(0,0,0,0))
x<-rnorm(12,mean = rep(1:3,4),sd = 0.2)
y<-rnorm(12,mean = rep(c(1,2,1),4),sd = 0.2)
plot(x,y,col = "blue",pch=19,cex=2)
text(x+0.05,y+0.05,labels = as.character(1:12))
df<-data.frame(x,y)
View(df)
kmeanobj<-kmeans(df,centers = 3)
names(kmeanobj)
kmeanobj$centers
kmeanobj$cluster
set.seed(67)
par(mar = c(0,0,0,0))
x2<-rnorm(15,mean = rep(1:3,5),sd = 0.2)
y2<-rnorm(15,mean = rep(c(1,2,3),5),sd = 0.2)
plot(x2,y2,col = "red",pch=19,cex=2)
text(x2+0.05,y2+0.05,labels = as.character(1:15))
df<-data.frame(x2,y2)
df<-data.frame(x,y)
df2<-data.frame(x2,y2)
x2<-rnorm(15,mean = rep(1:5,3),sd = 0.2)
y2<-rnorm(15,mean = rep(c(1,2,3,2,1),3),sd = 0.2)
plot(x2,y2,col = "red",pch=19,cex=2)
text(x2+0.05,y2+0.05,labels = as.character(1:15))
par(mar = c(0,0,0,0))
x2<-rnorm(12,mean = rep(1:4,3),sd = 0.2)
y2<-rnorm(12,mean = rep(c(1,2,3,2),3),sd = 0.2)
plot(x2,y2,col = "red",pch=19,cex=2)
text(x2+0.05,y2+0.05,labels = as.character(1:12))
df2<-data.frame(x2,y2)
kmeanobj2<-kmeans(df2,centers = 4)
kmeanobj2$cluster
kmeanobj2$centers
kmeanobj2<-kmeans(df2,centers = 3)
kmeanobj2$centers
kmeanobj2$cluster
par(margin=rep(0.2,4))
par(mar=rep(0.2,4))
kmeanobj$cluster
par(mar=rep(0.2,4))
plot(x,y,col=kmeanobj$cluster,pch=19,cex=2)
points(kmeanobj$centers,col = 1:3,pch=3,cex=3,lwd = 3)
kmeanobj<-kmeans(df,centers = 2)
kmeanobj$cluster
plot(x,y,col=kmeanobj$cluster,pch=19,cex=2)
points(kmeanobj$centers,col = 1:3,pch=3,cex=3,lwd = 3)
plot(x,y,col=kmeanobj$cluster,pch=19,cex=2)
points(kmeanobj$centers,col = 1:2,pch=3,cex=3,lwd = 3)
set.seed(88)
par(mar = c(0,0,0,0))
x<-rnorm(12,mean = rep(1:3,4),sd = 0.2)
y<-rnorm(12,mean = rep(c(1,2,1),4),sd = 0.2)
plot(x,y,col = "blue",pch=19,cex=2)
text(x+0.05,y+0.05,labels = as.character(1:12))
df<-data.frame(x,y)
set.seed(100)
par(mar = c(0,0,0,0))
x<-rnorm(12,mean = rep(c(4,5,3),4),sd = 0.3)
y<-rnorm(12,mean = rep(c(2,5,6),4),sd = 0.3)
plot(x,y,col = "black",pch=19,cex=2)
text(x+0.05,y+0.05,labels = as.character(1:12))
df3<-data.frame(x,y)
View(df3)
kmeanobj<-kmeans(df,centers = 3)
kmeanobj$cluster
par(mar=rep(0.2,4))
plot(x,y,col=kmeanobj$cluster,pch=19,cex=2)
points(kmeanobj$centers,col = 1:2,pch=3,cex=3,lwd = 3)
plot(x,y,col=kmeanobj$cluster,pch=20,cex=3)
points(kmeanobj$centers,col = 1:2,pch=3,cex=5,lwd = 3)
plot(x,y,col=kmeanobj$cluster,pch=10,cex=3)
points(kmeanobj$centers,col = 1:2,pch=3,cex=5,lwd = 3)
plot(x,y,col=kmeanobj$cluster,pch=11,cex=3)
points(kmeanobj$centers,col = 1:2,pch=3,cex=5,lwd = 3)
plot(x,y,col=kmeanobj$cluster,pch=15,cex=3)
points(kmeanobj$centers,col = 1:2,pch=3,cex=5,lwd = 3)
plot(x,y,col=kmeanobj$cluster,pch=19,cex=3)
points(kmeanobj$centers,col = 1:2,pch=3,cex=5,lwd = 3)
plot(x,y,col=kmeanobj$cluster,pch=19,cex=1)
points(kmeanobj$centers,col = 1:2,pch=3,cex=5,lwd = 3)
plot(x,y,col=kmeanobj$cluster,pch=19,cex=2)
points(kmeanobj$centers,col = 1:2,pch=3,cex=5,lwd = 3)
plot(x,y,col=kmeanobj$cluster,pch=19,cex=2)
plot(x,y,col=kmeanobj$cluster,pch=19,cex=2)
points(kmeanobj$centers,col = 1:3,pch=3,cex=5,lwd = 3)
kmeanobj$centers
plot(x,y,col=kmeanobj$cluster,pch=19,cex=2)
points(kmeanobj$centers,col = 1:3,pch=11,cex=5,lwd = 3)
kmeanobj<-kmeans(df,centers = 2)
plot(x,y,col=kmeanobj$cluster,pch=19,cex=2)
points(kmeanobj$centers,col = 1:3,pch=11,cex=5,lwd = 3)
plot(x,y,col=kmeanobj$cluster,pch=19,cex=2)
points(kmeanobj$centers,col = 1:3,pch=4,cex=5,lwd = 3)
plot(x,y,col=kmeanobj$cluster,pch=19,cex=2)
points(kmeanobj$centers,col = 1:3,pch=4,cex=20,lwd = 3)
kmeanobj<-kmeans(df,centers = 3)
names(kmeanobj)
par(mar=rep(0.2,4))
plot(x,y,col=kmeanobj$cluster,pch=19,cex=2)
points(kmeanobj$centers,col = 1:3,pch=4,cex=20,lwd = 3)
plot(x,y,col=kmeanobj$cluster,pch=19,cex=2)
points(kmeanobj$centers,col = 1:3,pch=3,cex=3,lwd = 3)
kmeanobj$centers
par(mar = c(0,0,0,0))
x<-rnorm(12,mean = rep(1:3,4),sd = 0.2)
y<-rnorm(12,mean = rep(c(1,2,1),4),sd = 0.2)
plot(x,y,col = "black",pch=19,cex=2)
text(x+0.05,y+0.05,labels = as.character(1:12))
df3<-data.frame(x,y)
kmeanobj<-kmeans(df,centers = 3)
par(mar=rep(0.2,4))
plot(x,y,col=kmeanobj$cluster,pch=19,cex=2)
points(kmeanobj$centers,col = 1:3,pch=3,cex=3,lwd = 3)
set.seed(101)
par(mar= rep(0.2,4))
dataMatrix<-matrix(rnorm(400),nrow =40)
image(1:10,1:40,t(dataMatrix)[,nrow(dataMatrix):1])
par(mar= rep(2,4))
dataMatrix<-matrix(rnorm(400),nrow =40)
image(1:10,1:40,t(dataMatrix)[,nrow(dataMatrix):1])
par(mar= rep(4,4))
dataMatrix<-matrix(rnorm(400),nrow =40)
image(1:10,1:40,t(dataMatrix)[,nrow(dataMatrix):1])
View(dataMatrix)
t(dataMatrix)
image(1:10,1:40,dataMatrix)
image(1:40,1:10,dataMatrix)
image(1:40,1:10,dataMatrix[,nrow(dataMatrix):1])
image(1:40,1:10,(dataMatrix[,nrow(dataMatrix):1]))
image(1:40,1:10,dataMatrix)
dataMatrix2<-matrix(rnorm(400),nrow =10)
image(1:10,1:40,dataMatrix)
image(1:10,1:40,dataMatrix2)
View(dataMatrix2)
set.seed(101)
par(mar= rep(4,4))
dataMatrix<-matrix(rnorm(400),nrow =40)
image(1:10,1:40,t(dataMatrix)[,nrow(dataMatrix):1])
heatmap(dataMatrix)
mtcars
mtcars
load(mtcars)
data("mtcars")
View(mtcars)
as.matrix(mtcars)
heatmap(mtcars)
names(mtcars)<-c(1:32)
dim(mtcars)
dfm<-as.data.frame(mtcars)
dfm[-1,]
View(dfm)
dfm2<-dfm[-1,]
View(dfm2)
dfm<-as.data.frame(mtcars,row.names = name)
dfm<-as.data.frame(mtcars,row.names ='name')
dd<-as.data.frame(mtcars,row.names = 'cars')
data("diamonds")
View(diamonds)
heatmap(diamonds)
diam<-diamonds[,-c(2,3,4)]
heatmap(diam)
hh<-hclust(dist(dataMatrix))
hh$order
dataMatrixOrder<-dataMatrix[hh$order,]
pal<-colorRampPalette(c('red','black'))
pal(4)
pal(20)
library(grDevices)
grDevices::colorRamp(c('red','blue'))
pal2<-colorRamp(c('red','blue'))
pal2(1)
pal2(0)
pal2(.6)
library(RColorBrewer) #brower.pal() to scale_color_manual() or scale_color_gradientn()
RColorBrewer::brewer.pal(name = 'red',n = 3)
RColorBrewer::brewer.pal(name = c('red','blue','yellow'),n = 3)
RColorBrewer::brewer.pal(name %in% c('red','blue','yellow'),n = 3)
RColorBrewer::brewer.pal(name = Blues,n = 3)
library(RColorBrewer)
cols<-brewer.pal("BuGn",3)
cols
cols<-brewer.pal(3,"BuGn")
cols
pal<-colorRampPalette(cols)
image(volcano,col=pal(20))
volcano
cols<-brewer.pal(3,"YlOrRd")
pal<-colorRampPalette(cols)
image(volcano,col = 20)
cols<-brewer.pal(3,"YlOrRd")
pal<-colorRampPalette(cols)
image(volcano,col = pal(20))
x<-rnorm(10000)
y<-rnorm(10000)
smoothScatter(x,y)
x<-rnorm(1000)
y<-rnorm(1000)
smoothScatter(x,y)
smoothScatter(x,y,colramp = 5)
smoothScatter(x,y,cols)
smoothScatter(x,y,pal(20))
smoothScatter(x,y,colramp = cols)
library(colorspace)
rgb(red = 1,green = 0,blue =0)
plot(x,y,col=rgb(0,0,0,0.2),pch=19)
xy<-data.frame(x,y)
ggplot(xy,aes(x=x,y=y,alpha=.2))+
geom_point()
ggplot(xy,aes(x=x,y=y))+
geom_point()
ggplot(xy,aes(x=x,y=y))+
geom_point()+
scale_color_brewer(cols)
cols<-brewer.pal(3,"YlOrRd")
ggplot(xy,aes(x=x,y=y))+
geom_point()+
scale_color_brewer(cols)
cols<-brewer.pal(3,"Set3")
ggplot(xy,aes(x=x,y=y))+
geom_point()+
scale_color_brewer(cols)
ggplot(xy,aes(x=x,y=y))+
geom_point()+
scale_color_brewer()
ggplot(xy,aes(x=x,y=y,col= cols))+
geom_point()+
scale_color_brewer()
cols<-brewer.pal(1000,"Set3")
ggplot(xy,aes(x=x,y=y,col= cols))+
geom_point()+
scale_color_brewer()
library(swirl)
exit
swirl()
install_course("Exploratory Data Analysis")
swirl()
dist(dataFrame)
hc<-hclust(distxy)
hc
plot(hc)
plot(as.dendrogram(hc))
plot(as.dendrogram(hc),h=1.5,col="blue")
abline(h=1.5,col="blue")
abline(as.dendrogram(hc),h=,col="red")
abline(h=.4,col="red")
abline(v=.4,col="red")
0
4
5
abline(h=.05,col="red")
5
0
7
8
1
2
3
4
5
6
7
8
9
10
11
abline(h=.08,col="red")
abline(v=.05,col="red")
9
12
abline(h=.05,col="green")
dist(dFsm)
hc
heatmap(dataMatrix,cm.colors(25))
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
denmt
distmt
cmat
plot(cx,cy,col=c("red", "orange", and "purple"),pch=3,cex=2,lwd=2)
plot(cx,cy,col=c("red", "orange", "purple"),pch=3,cex=2,lwd=2)
points(cx,cy,col=c("red", "orange", "purple"),pch=3,cex=2,lwd=2)
mdist(cx,cy)
mdist()
mdist(c(x,y),centroid=c(cx,cy))
mdist(x,y,centroid=c(cx,cy))
mdist(x,y,centroid=cx,cy)
mdist(x,y,cx,cy)
apply(distTmap, 2, which.min)
apply(distTmp, 2, which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x,newClust,mean)
newClust
tapply(y,newClust,mean)
points(newCx,newCy,pch=8,cex=2,lwd=2,col=cols1)
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
mdist(x,y,newCx,newCy)
apply(distTmp2, 2, which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x, newClust2,mean)
newClust2
tapply(y,newClust2,mean)
points(finalCx,finalCy,col=cols1,pch=9,cex=2lwd=2)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,wd=2)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame,centers = 3)
kmObj$iter
plot(x,y,col=kmObj$cluster,pch =19,cex=2)
points(kmObj$centers,col=c("black","red","green"),pch=3, cex=3, lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
ssd
dim(ssd)
names(ssd[,c(562,563)])
table(ssd$subject)
table(sum(ssd$subject))
sum(table(ssd$subject))
dim(ssd)
table(ssd$activity)
View(ssd)
sub1 <- subset(ssd, subject == 1)
sub1
dim(sub1)
View(sub1)
names(sub1[1:12])
myedit(fname ="showXY.R" )
showMe(1:6)
mdist<-dist(sub1[,1:3])
hclust(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col =unclass(sub1$activity) )
mdist<-dist(sub1[,10:12])
hclustering<-hclust(mdist)
myplclust(hclustering,lab.col =unclass(sub1$activity) )
svd1<-svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon<-which.max(svd1$v[,2])
mdist<-dist(sub1[,10:12,maxCon])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering<-hclust(mdist)
myplclust(hclustering,lab.col = unclass(sub1$activity))
names(sub1[maxCon])
KClust<-kmeans(sub1,6)
View(sub1)
KClust<-kmeans(sub1[,c(562,563)])
KClust<-kmeans(sub1[,c(562,563)],6)
KClust<-kmeans(sub1[,-c(562,563)],6)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster,sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6,nstart = 100)
table(kClust$cluster,sub1$activity)
dim(KClust$centers)
dim(kClust$centers)
laying<-which(kClust$size==29)
plot(kClust$centers[laying,1:12],pch=19,ylab="Laying Cluster")
names(sub1[,1:3])
walkdown<-which(kClust$size==49)
plot(kClust$centers[walkdown,1:12],pch=19,ylab="Walkdown Cluster")
install.packages('kernlab')
library(kernlab)
data("spam")
View(spam)
struc<-str(spam)
set.seed(213)
trainIndicator<-rbinom(4601,size = 1,prob = 0.5)
table(trainIndicator)
trainSpam<- spam[trainIndicator==1,]
testSpam<- spam[trainIndicator==0,]
View(trainSpam)
View(testSpam)
names(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve+1) ~ trainSpam$type)
plot(log10(trainSpam[,1:4]+1))
clust<-hclust(dist(t(trainSpam[,1:57])))
plot(clust)
clustUpdate<-hclust(dist(t(log10(trainSpam[,1:57]+1))))
plot(clustUpdate)
library(R++)
install.packages("R++")
library(datasets)
data("airquality")
airquality
library(datasets)
data("airquality")
View(airquality)
install.packages('cacheSweave')
setwd("C:/Users/user/Desktop/My folder/NTL/Courses/5-Reproducibilty Researc/Proj_1")
source("PA1_template.md")
source(file = "PA1_template.Rmd")
h <- "Hello"
yourname <- readline("What is your name?")
h <- "Hello"
yourname <- readline("What is your name?")
print(paste(h, yourname))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source(yourname)
library(cacher)
install.packages(""cacher)
install.packages("cacher")
